datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int     @id @default(autoincrement())
  userId   String? @unique
  email    String? @unique
  name     String?
  password String
  company  String?
  ships    Ship[] 
}

model Ship {
  id             Int             @id @default(autoincrement())
  name           String
  type           String
  flag           String
  imoNumber      String          @unique
  mmsi           String          @unique //added *
  callsign       String          @unique //added *
  deadweight     Int
  length         Float
  beam           Float        //added *
  width          Float
  yearBuilt      Int
  currentStatus  String
  portOfRegistry String
  ecoStandard    String
  fuelRecords    ShipFuel[] 
  routes         ShipRoute[] 
  certifications Certification[] 
  inspections    Inspection[] 
  fixtures       Fixture[] 
  crew           Crew[]  
  logbooks       Logbook[] 
  User           User?           @relation(fields: [userId], references: [id])
  userId         Int?
}

model ShipFuel {
  id          Int      @id @default(autoincrement())
  shipId      Int      // Идентификатор судна
  date        DateTime // Дата записи
  refuelDate  DateTime? // Дата заправки
  fuelType    String   // Тип топлива
  amount      Float    // Количество топлива
  price       Float    // Цена за единицу топлива
  totalCost   Float    // Общая стоимость топлива
  ship        Ship     @relation(fields: [shipId], references: [id]) // Связь с моделью Ship
}

model ShipRoute {
  id           Int      @id @default(autoincrement())
  shipId       Int      // Идентификатор судна
  start        String   // Начальная точка маршрута
  destination  String   // Конечная точка маршрута
  date         DateTime // Дата отправления
  arrivalDate  DateTime // Дата прибытия
  ship         Ship     @relation(fields: [shipId], references: [id])
}

model Certification {
  id                   Int      @id @default(autoincrement())
  shipId               Int      // Идентификатор судна
  type                 String   // Тип сертификата (напр., безопасности, экологии и т.д.)
  issuedDate           DateTime // Дата выдачи сертификата
  expiryDate           DateTime // Дата истечения срока действия сертификата
  issuingAuthority     String   // Орган, выдавший сертификат
  standard             String   // Стандарт сертификации (ISO, MARPOL, SOLAS и т.д.)
  complianceLevel      String   // Уровень соответствия (полный, временный, ограниченный)
  verificationDate     DateTime // Дата последней проверки
  certificateNumber    String   // Номер сертификата
  inspectionRequirements String? // Требования к инспекциям
  nextInspectionDate   DateTime? // Дата следующей инспекции
  inspectorName        String?   // Имя инспектора или должность
  certificationCompany String?   // Название компании, проводившей сертификацию
  remarks              String?   // Дополнительные замечания
  ship                 Ship      @relation(fields: [shipId], references: [id]) // Связь с моделью Ship
}

model Inspection {
  id                 Int       @id @default(autoincrement())
  shipId             Int       // Идентификатор судна
  inspectionDate     DateTime  // Дата проверки
  inspectorName      String    // Имя проверяющего
  inspectionType     String    // Тип проверки (напр., регулярная, внеплановая)
  results            String    // Результаты проверки
  recommendations    String?   // Рекомендации после проверки
  nextInspectionDate DateTime? // Дата следующей проверки (если применимо)
  inspectionReport   String?   // Ссылка на отчет о проверке (например, PDF-файл или URL)  
  complianceStandards  String    // Стандарты, по которым проводилась проверка (MARPOL, SOLAS, ISO и т.д.)
  deficienciesFound    String?   // Выявленные несоответствия
  correctiveActions    String?   // Корректирующие действия для устранения недостатков
  verificationStatus   String    // Статус проверки (например, "пройдено", "требуется доработка")
  duration             Int?      // Продолжительность инспекции (в часах или минутах)
  isEUCompliance       Boolean   // Соответствует ли проверка нормам ЕС
  ship                 Ship      @relation(fields: [shipId], references: [id]) // Связь с моделью Ship
}

model Fixture {
  id               Int      @id @default(autoincrement())
  shipId           Int      // Идентификатор судна
  chartererName    String   // Имя фрахтователя
  startDate        DateTime // Дата начала фрахта
  endDate          DateTime // Дата окончания фрахта
  totalCost        Float    // Общая стоимость фрахта
  currency         String?  // Валюта стоимости фрахта (напр., USD, EUR)
  paymentTerms     String   // Условия оплаты
  cargoDescription String?  // Описание груза (если применимо)
  deliveryLocation String?  // Место доставки груза
  fixtureType      String   // Тип фрахта (напр., время, тонны и т.д.)
  brokerName       String?  // Имя брокера (если применимо)
  status           String   // Статус фрахта (напр., "в процессе", "завершён")
  cancellationTerms String? // Условия отмены фрахта (если применимо)
  isCompleted      Boolean  @default(false) // Флаг завершения фрахта
  notes            String?  // Дополнительные примечания
  ship             Ship     @relation(fields: [shipId], references: [id]) // Связь с моделью Ship
}

model Logbook {
  id                Int       @id @default(autoincrement())
  shipId            Int       // Идентификатор судна
  date              DateTime  // Дата и время записи
  location          String    // Местоположение судна
  operationType     String    // Тип операции (напр., заход в порт, выход из порта и т.д.)
  eventDescription  String    // Описание события
  weatherConditions String?   // Погодные условия (напр., ясно, шторм, дождь)
  seaConditions     String?   // Состояние моря (напр., спокойное, волнение)
  speed             Float?    // Скорость судна в узлах
  engineStatus      String?   // Состояние двигателя (работает, выключен и т.д.)
  fuelConsumption   Float?    // Количество потребленного топлива
  crewCount         Int?      // Количество членов экипажа на борту
  inspectionCheck   Boolean   @default(false) // Проверка или инспекция оборудования
  responsible       String    // Подпись ответственного лица
  notes             String?   // Дополнительные комментарии или примечания
  ship              Ship      @relation(fields: [shipId], references: [id]) // Связь с моделью Ship
}

model Crew {
  id               Int       @id @default(autoincrement())
  shipId           Int       // Идентификатор судна
  name             String    // Имя члена экипажа
  role             String    // Роль в экипаже
  rank             String?   // Звание или должность (например, капитан, механик)
  joinDate         DateTime  // Дата вступления в экипаж
  contractEndDate  DateTime? // Дата окончания контракта (если применимо)
  status           String    // Статус члена экипажа (активен, в отпуске, уволен)
  qualifications   String?   // Дополнительные квалификации или навыки
  certifications   String?   // Сертификации члена экипажа (например, для работы на определенных судах)
  leaveDate        DateTime? // Дата увольнения или отпуска (если применимо)
  nationality      String?   // Национальность члена экипажа

  ship             Ship      @relation(fields: [shipId], references: [id]) // Связь с моделью Ship
}
